apply plugin: 'com.android.application'
// Google Services Gradle plugin
apply plugin: 'com.google.gms.google-services'
// Crashlytics Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'
// Kotlin
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    defaultConfig {
        applicationId "com.tohsoft.app"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            try {
                storeFile file("TOHAndroidKS")
                storePassword KEYSTORE_PASSWORD
                keyAlias "tohandroidks"
                keyPassword KEY_PASSWORD
            } catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        ignore 'ExtraTranslation', 'MissingTranslation'
        abortOnError false
    }

    sourceSets {
        pro.setRoot('src/pro')
        normal.setRoot('src/main')
        adDebug.setRoot('src/main')
    }

    flavorDimensions "capabilities"

    productFlavors {
        normal {
            dimension "capabilities"
            buildConfigField "boolean", "FULL_VERSION", "Boolean.parseBoolean(\"false\")"
            buildConfigField "boolean", "SHOW_AD", "Boolean.parseBoolean(\"true\")"
            buildConfigField "boolean", "TEST_AD", "Boolean.parseBoolean(\"false\")"
        }

        pro {
            dimension "capabilities"
            buildConfigField "boolean", "FULL_VERSION", "Boolean.parseBoolean(\"true\")"
            buildConfigField "boolean", "SHOW_AD", "Boolean.parseBoolean(\"false\")"
            buildConfigField "boolean", "TEST_AD", "Boolean.parseBoolean(\"false\")"
            applicationIdSuffix ".pro"
        }

        adDebug {
            dimension "capabilities"
            buildConfigField "boolean", "FULL_VERSION", "Boolean.parseBoolean(\"false\")"
            buildConfigField "boolean", "SHOW_AD", "Boolean.parseBoolean(\"true\")"
            buildConfigField "boolean", "TEST_AD", "Boolean.parseBoolean(\"true\")"
            versionName "0.001"
        }
    }

    // Tự động đổi tên apk và mapping file
    android.applicationVariants.all { variant ->
        def namePrefix = "Project_Template"
        if (getName().startsWith("pro")) {
            namePrefix = "Project_Template_Pro"
        }

        def apkName = namePrefix + "_v${variant.versionName}"
        variant.outputs.all {
            outputFileName =  apkName + ".apk"
        }

        if (!getName().contains("adDebug")) {
            variant.outputs.each { output ->
                if (variant.getBuildType().isMinifyEnabled()) {
                    variant.assemble.doLast {
                        copy {
                            from variant.mappingFile
                            into output.outputFile.parent
                            rename { String fileName ->
                                apkName + "_mapping.txt"
                            }
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation libraries
    implementation arch_libraries
    kapt librariesKapt

    // Modules
    implementation project(':toh_rate_lib')
    implementation project(':TOH-Base')
}
